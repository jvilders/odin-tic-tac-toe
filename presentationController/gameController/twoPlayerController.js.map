{"version":3,"file":"twoPlayerController.js","sourceRoot":"","sources":["../../../src/presentationController/gameController/twoPlayerController.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,aAAa,EAAE,UAAU,EAAE,WAAW,EAAE,MAAM,sBAAsB,CAAC;AAC9E,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,MAAM,kBAAkB,CAAC;AAE5C,MAAM,CAAC,OAAO,UAAU,4BAA4B,CAClD,WAAmB,EACnB,WAAmB;IAEnB,MAAM,IAAI,GAAG,aAAa,EAAE,CAAC;IAC7B,MAAM,OAAO,GAAG;QACd,UAAU,CAAC,WAAW,EAAE,WAAW,CAAC,OAAO,CAAC;QAC5C,UAAU,CAAC,WAAW,EAAE,WAAW,CAAC,OAAO,CAAC;KAC7C,CAAC;IACF,IAAI,iBAAiB,GAAG,CAAC,CAAC;IAE1B,SAAS,eAAe;QACtB,OAAO,OAAO,CAAC,iBAAiB,CAAC,CAAC;IACpC,CAAC;IAED,SAAS,aAAa;QACpB,MAAM,YAAY,GAAG,eAAe,EAAE,CAAC;QACvC,IAAI,CAAC,SAAS,EAAE,CAAC;QACjB,OAAO,CAAC,GAAG,CACT,GAAG,YAAY,CAAC,OAAO,EAAE,YAAY,YAAY,CAAC,OAAO,EAAE,IAAI,CAChE,CAAC;IACJ,CAAC;IAED,SAAS,SAAS,CAAC,GAAW,EAAE,MAAc;QAC5C,MAAM,YAAY,GAAG,eAAe,EAAE,CAAC;QACvC,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;QAC9D,IAAI,OAAO,UAAU,KAAK,QAAQ,EAAE;YAClC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YACxB,OAAO;SACR;QAED,IAAI,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE;YAC7B,OAAO,CAAC,GAAG,CAAC,GAAG,YAAY,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;YAC/C,OAAO,GAAG,CAAC,YAAY,CAAC,CAAC;SAC1B;QAED,IAAI,IAAI,CAAC,KAAK,EAAE,EAAE;YAChB,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YACzB,OAAO,GAAG,EAAE,CAAC;SACd;QAED,iBAAiB,GAAG,MAAM,CAAC,CAAC,iBAAiB,CAAC,CAAC;QAC/C,aAAa,EAAE,CAAC;IAClB,CAAC;IAED,aAAa,EAAE,CAAC;IAEhB,OAAO;QACL,SAAS;QACT,eAAe;QACf,QAAQ,EAAE,IAAI,CAAC,QAAQ;KACxB,CAAC;AACJ,CAAC","sourcesContent":["import { ITicTacToeController, IGameOutcome } from \"./types.js\";\nimport { makeGameBoard, makePlayer, cellContent } from \"./gameBoard/index.js\";\nimport { win, tie } from \"./gameOutcome.js\";\n\nexport default function twoPlayerTicTacToeController(\n  player1Name: string,\n  player2Name: string\n): ITicTacToeController {\n  const game = makeGameBoard();\n  const players = [\n    makePlayer(player1Name, cellContent.Crosses),\n    makePlayer(player2Name, cellContent.Noughts),\n  ];\n  let activePlayerIndex = 0;\n\n  function getActivePlayer() {\n    return players[activePlayerIndex];\n  }\n\n  function announceRound() {\n    const activePlayer = getActivePlayer();\n    game.showBoard();\n    console.log(\n      `${activePlayer.getName()}'s turn (${activePlayer.getMark()})!`\n    );\n  }\n\n  function playRound(row: number, column: number): undefined | IGameOutcome {\n    const activePlayer = getActivePlayer();\n    const moveResult = game.markSquare(activePlayer, row, column);\n    if (typeof moveResult === \"string\") {\n      console.log(moveResult);\n      return;\n    }\n\n    if (game.hasWon(activePlayer)) {\n      console.log(`${activePlayer.getName()} wins!`);\n      return win(activePlayer);\n    }\n\n    if (game.isTie()) {\n      console.log(\"Tie game!\");\n      return tie();\n    }\n\n    activePlayerIndex = Number(!activePlayerIndex);\n    announceRound();\n  }\n\n  announceRound();\n\n  return {\n    playRound,\n    getActivePlayer,\n    getBoard: game.getBoard,\n  };\n}\n"]}
{"version":3,"file":"gameBoard.js","sourceRoot":"","sources":["../../../../src/presentationController/gameController/gameBoard/gameBoard.ts"],"names":[],"mappings":"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","sourcesContent":["import { IGameBoard, IPlayer } from \"./types.js\";\nimport { makeCell, cellContent } from \"./boardCell/index.js\";\n\nexport default function makeGameBoard() {\n  const board: IGameBoard = [\n    [makeCell(), makeCell(), makeCell()],\n    [makeCell(), makeCell(), makeCell()],\n    [makeCell(), makeCell(), makeCell()],\n  ];\n\n  function markSquare(\n    player: IPlayer,\n    row: number,\n    column: number\n  ): string | undefined {\n    const targetSquare = board[row][column];\n\n    if (targetSquare.getValue() !== cellContent.Empty) {\n      return \"This space is already taken\";\n    }\n\n    targetSquare.changeValue(player.getMark());\n  }\n\n  function getBoard() {\n    return board;\n  }\n\n  function showBoard() {\n    console.log(\n      board.map((boardRow) => boardRow.map((boardCell) => boardCell.getValue()))\n    );\n  }\n\n  function isTie(): boolean {\n    for (const boardRow of board) {\n      for (const boardCell of boardRow) {\n        if (boardCell.getValue() === cellContent.Empty) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  function hasWon(player: IPlayer): boolean {\n    // naive implementation for now\n    const targetMark = player.getMark();\n\n    // check rows\n    if (\n      board.some((boardRow) =>\n        boardRow.every((cell) => cell.getValue() === targetMark)\n      )\n    ) {\n      return true;\n    }\n\n    // check columns\n    for (let columnIndex = 0; columnIndex < 3; columnIndex++) {\n      if (\n        board.every(\n          (boardRow) => boardRow[columnIndex].getValue() === targetMark\n        )\n      ) {\n        return true;\n      }\n    }\n\n    // check diagonals\n    if (\n      (board[0][0].getValue() === targetMark &&\n        board[1][1].getValue() === targetMark &&\n        board[2][2].getValue() === targetMark) ||\n      (board[0][2].getValue() === targetMark &&\n        board[1][1].getValue() === targetMark &&\n        board[2][0].getValue() === targetMark)\n    ) {\n      return true;\n    }\n\n    return false;\n  }\n\n  return { markSquare, getBoard, showBoard, isTie, hasWon };\n}\n"]}
{"version":3,"file":"aiController.js","sourceRoot":"","sources":["../../../src/presentationController/gameController/aiController.ts"],"names":[],"mappings":"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","sourcesContent":["import { ITicTacToeController, IGameOutcome } from \"./types.js\";\nimport {\n  makeGameBoard,\n  makePlayer,\n  cellContent,\n  IPlayer,\n  IGameBoard,\n} from \"./gameBoard/index.js\";\nimport { win, tie } from \"./gameOutcome.js\";\n\nexport default function aiTicTacToeController(\n  player1Name: string\n): ITicTacToeController {\n  const game = makeGameBoard();\n  const realPlayer = makePlayer(player1Name, cellContent.Crosses);\n  const aiPlayer = makePlayer(\"AI\", cellContent.Noughts);\n\n  function getActivePlayer() {\n    return realPlayer;\n  }\n\n  function playRound(row: number, column: number): undefined | IGameOutcome {\n    const moveResult = game.markSquare(realPlayer, row, column);\n    if (typeof moveResult === \"string\") {\n      console.log(moveResult);\n      return;\n    }\n\n    if (game.hasWon(realPlayer)) {\n      console.log(`${realPlayer.getName()} wins!`);\n      return win(realPlayer);\n    }\n\n    if (game.isTie()) {\n      console.log(\"Tie game!\");\n      return tie();\n    }\n\n    // AI turn\n    const [aiSelectedRow, aiSelectedColumn] = pickBestMove(aiPlayer);\n    game.markSquare(aiPlayer, aiSelectedRow, aiSelectedColumn);\n\n    if (game.hasWon(aiPlayer)) {\n      console.log(`${aiPlayer.getName()} wins!`);\n      return win(aiPlayer);\n    }\n\n    if (game.isTie()) {\n      console.log(\"Tie game!\");\n      return tie();\n    }\n  }\n\n  function _lt(a: number, b: number) {\n    return a < b;\n  }\n\n  function _gt(a: number, b: number) {\n    return a > b;\n  }\n\n  function _switch_player(player: IPlayer) {\n    return player === aiPlayer ? realPlayer : aiPlayer;\n  }\n\n  function minimax(\n    board: IGameBoard,\n    depth: number,\n    player: IPlayer,\n    isMaximizing: boolean\n  ): [number, number, number] {\n    if (game.hasWon(isMaximizing ? player : _switch_player(player))) {\n      return [10 - depth, -1, -1];\n    }\n    if (game.hasWon(isMaximizing ? _switch_player(player) : player)) {\n      return [-10 + depth, -1, -1];\n    }\n    if (game.isTie()) {\n      return [0, -1, -1];\n    }\n\n    let value: [number, number, number] = [isMaximizing ? -9999 : 9999, -1, -1];\n    const f = isMaximizing ? _gt : _lt;\n\n    for (let row = 0; row < 3; row++) {\n      for (let column = 0; column < 3; column++) {\n        const boardCell = board[row][column];\n        if (boardCell.getValue() !== cellContent.Empty) {\n          continue;\n        }\n        boardCell.changeValue(player.getMark());\n        const minimaxValue = minimax(\n          board,\n          depth + 1,\n          _switch_player(player),\n          !isMaximizing\n        )[0];\n\n        if (f(minimaxValue, value[0])) {\n          value = [minimaxValue, row, column];\n        }\n        boardCell.changeValue(cellContent.Empty);\n      }\n    }\n\n    return value;\n  }\n\n  function pickBestMove(player: IPlayer): [number, number] {\n    const [bestMoveRow, bestMoveColumn] = minimax(\n      game.getBoard(),\n      0,\n      player,\n      true\n    ).slice(1);\n    return [bestMoveRow, bestMoveColumn];\n  }\n\n  return {\n    playRound,\n    getActivePlayer,\n    getBoard: game.getBoard,\n  };\n}\n"]}